import java.util.*;

class Solution {
    static final int MOD = 1_000_000_007;
    static int[][] dp;

    static int solve(int i, int count, List<Integer> freq, int k) {
        if (i >= freq.size()) {
            return count < k ? 1 : 0;
        }

        if (dp[i][count] != -1) return dp[i][count];

        long res = 0;

        for (int take = 1; take <= freq.get(i); take++) {
            if (count + take < k) {
                res = (res + solve(i + 1, count + take, freq, k)) % MOD;
            } else {
                break;
            }
        }

        dp[i][count] = (int) res;
        return dp[i][count];
    }

    public int possibleStringCount(String word, int k) {
        if (k > word.length()) return 0;

        int count = 1;
        List<Integer> freq = new ArrayList<>();

        for (int i = 1; i < word.length(); i++) {
            if (word.charAt(i) == word.charAt(i - 1)) {
                count++;
            } else {
                freq.add(count);
                count = 1;
            }
        }
        freq.add(count);

        long P = 1;
        for (int f : freq) {
            P = (P * f) % MOD;
        }

        if (word.length() < k) return 0;

        int n = freq.size();
        dp = new int[n + 1][k + 1];
        for (int[] row : dp) Arrays.fill(row, -1);

        long invalidCnt = solve(0, 0, freq, k);
        return (int) ((P - invalidCnt + MOD) % MOD);
    }
}
